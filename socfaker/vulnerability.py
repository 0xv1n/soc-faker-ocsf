import json, random

class Vulnerability(object):
    
    def __init__(self, critical = 0, high = 0, medium = 0, low = 0, informational = 0, data='./data/nessus-plugin-samples.json'):
        self.data = data
        
        if critical or high or medium or low or informational:
            if critical:
                self.critical = critical
                print(critical)
            if high:
                self.high = high
            if medium:
                self.medium = medium
            if low:
                self.low = low
            if informational:
                self.informational = informational
        
    @property
    def data(self):
        return self._data

    @data.setter
    def data(self, value):
        with open(value) as json_file:
            self._data = json.load(json_file)
    
    @property
    def critical(self):
        return self._critical

    @critical.setter
    def critical(self, value):
        count = 0
        critical_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'critical':
                critical_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._critical = critical_list
       
    @property
    def high(self):
        return self._high

    @high.setter
    def high(self, value):
        count = 0
        high_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'high':
                high_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._high = high_list

    @property
    def medium(self):
        return self._medium

    @medium.setter
    def medium(self, value):
        count = 0
        medium_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'medium':
                medium_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._medium = medium_list

    @property
    def low(self):
        return self._low

    @low.setter
    def low(self, value):
        count = 0
        low_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'low':
                low_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._low = low_list

    @property
    def informational(self):
        return self._informational

    @informational.setter
    def informational(self, value):
        count = 0
        informational_list = []
        for vuln in self.data:
            if vuln['risk_factor'].lower() == 'informational':
                informational_list.append(random.choice([vuln]))
                count += 1
            if count == value:
                break
        self._informational = informational_list